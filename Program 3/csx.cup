/** csx CUP Specification
 *  @author Doug Fultz
 *  @author Sujay Kallamadi
 */

import java_cup.runtime.*;

parser code {:
    public void syntax_error(Symbol cur_token){
        report_error("CSX syntax error at line "+String.valueOf(((CSXToken)cur_token.value).linenum),null);
    }
:};

/* Preliminaries to set up and use the scanner.  */
init with {:              :};
scan with {: return Scanner.next_token(); :};

/* Terminals (tokens returned by the scanner). */
//Assignment
terminal CSXToken               ASG;
//Comparision
terminal CSXToken               EQ, NOTEQ, GEQ, GT, LEQ, LT;
//Boolean
terminal CSXToken               CAND, COR, NOT;
//Math
terminal CSXToken               MINUS, PLUS, SLASH, TIMES;
//Inrement/Decrement
//terminal CSXToken               DEC, INC;
//Braces
terminal CSXToken               LBRACE, RBRACE;
//Brackets
terminal CSXToken               LBRACKET, RBRACKET;
//Parenthesis
terminal CSXToken               LPAREN, RPAREN;
//Reserved Words
terminal CSXToken               rw_BOOL, rw_BREAK, rw_CHAR, rw_CLASS, rw_CONST, rw_CONTINUE, rw_ENDIF, rw_ELSE, rw_FALSE, rw_IF, rw_INT, rw_PRINT, rw_READ, rw_RETURN, rw_TRUE, rw_VOID, rw_WHILE;
//Unused Reserved Words
//terminal CSXToken               rw_FLOAT;
//Miscellaneous Symbols
terminal CSXToken               COLON, COMMA, SEMI;
//Error
//terminal CSXToken               error;
//End of file
//terminal CSXToken               EOF;
//Character Literal
terminal CSXCharLitToken        CHARLIT;
//Identifier
terminal CSXIdentifierToken     IDENTIFIER;
//Integer Literal
terminal CSXIntLitToken         INTLIT;
//Float Literal
terminal CSXFloatLitToken       FLOATLIT;
//String Literal
terminal CSXStringLitToken      STRLIT;

/* Non terminals */
non terminal csxProgramNode     Program;
non terminal memberDeclsNode    Memberdecls;
non terminal fieldDeclsNode     Fielddecls;
non terminal methodDecelsNode   Methoddecls;
non terminal optionalSimiNode   OptionalSemi;
non terminal methodDecelNode    Methoddecl;
non terminal argDeclsNode       Argdecls;
non terminal argDeclNode        Argdecl;
non terminal fieldDeclNode      Fielddecl;
non terminal stmtsNode          Stmts;
non terminal stmtNode           Stmt;
non terminal typeNode           Type;
non terminal argsNode           Args;
non terminal readListNode       Readlist;
non terminal printListNode      Printlist;
non terminal exprNode           Expr;
non terminal termNode           Term;
non terminal factorNode         Factor;
non terminal priNode            Pri;
non terminal unaryNode          Unary;
non terminal unitNode           Unit;
non terminal nameNode           Name;

/* Precedences/Associativity */
precedence left         CAND, COR, NOT;
precedence nonassoc     EQ, NOTEQ, GEQ, GT, LEQ, LT;
precedence left         PLUS, MINUS;
precedence left         TIMES, SLASH;
precedence right        NOT;
//Needed to make Unary highest precedence???
//precedence right        NOT, RPAREN;

/* The grammar */
start with Program;

//Program  →  class id { Memberdecls }
Program         ::= rw_CLASS:cl IDENTIFIER:id LBRACE Memberdecls:members RBRACE
                    {: RESULT= new csxProgramNode(id,members,cl.linenum,cl.colnum); :}
                ;
//Memberdecls  →  Fielddecl Memberdecls
//             |  Methoddecls
Memberdecls     ::= Fielddecl:field Memberdecls:members
                    {: RESULT= new memberDeclsNode(field,members,field.linenum,field.colnum); :}
                |   Methoddecls:methods
                    {: RESULT= new memberDeclsNode(methods,methods.linenum,methods.colnum); :}
                ;
//Fielddecls →  Fielddecl Fielddecls
//           |  λ
Fielddecls      ::= Fielddecl:field Fielddecls:fields
                    {: RESULT= new fieldDeclsNode(field,fields,field.linenum,field.colnum); :}
                |
                    {: RESULT= fieldDeclsNode.NULL; :}
                ;
//Methoddecls  →  Methoddecl Methoddecls
//             |  λ
Methoddecls     ::= Methoddecl:method Methoddecls:methods
                    {: RESULT= new methodDecelsNode(method,methods,method.linenum,method.colnum); :}
                |
                    {: RESULT= memberDeclsNode.NULL; :}
                ;
//OptionalSemi  →  ;
//              |  λ
OptionalSemi    ::= SEMI:semi
                    {: RESULT= new optionalSimiNode(semi.linenum, semi.colnum); :]
                |
                    {: RESULT= optionalSimiNode.NULL; :}
                ;
//Methoddecl →  void id ( ) { Fielddecls Stmts } OptionalSemi
//           |  void id ( Argdecls ) { Fielddecls Stmts } OptionalSemi
//           |  Type id ( ) { Fielddecls Stmts } OptionalSemi
//           |  Type id ( Argdecls ){ Fielddecls Stmts } OptionalSemi
Methoddecl      ::= rw_VOID:type IDENTIFIER:id LPAREN RPAREN LBRACE Fielddecls:fields Stmts:stmts RBRACE OptionalSemi
                    {: RESULT= new methodDecelNode(id,fields,stmts,type.linenum,type.colnum); :}
                |   rw_VOID:type IDENTIFIER:id LPAREN Argdecls:args RPAREN LBRACE Fielddecls:fields Stmts:stmts RBRACE OptionalSemi
                    {: RESULT= new methodDecelNode(id,args,fields,stmts,type.linenum,type.colnum); :}
                |   Type:type IDENTIFIER:id LPAREN RPAREN LBRACE Fielddecls:fields Stmts:stmts RBRACE OptionalSemi
                    {: RESULT= new methodDecelNode(type,id,fields,stmts,type.linenum,type.colnum); :}
                |   Type:type IDENTIFIER:id LPAREN Argdecls:args RPAREN LBRACE Fielddecls:fields Stmts:stmts RBRACE OptionalSemi
                    {: RESULT= new methodDecelNode(type,id,args,fields,stmts,type.linenum,type.colnum); :}
                ;
//Argdecls  →  Argdecl , Argdecls
//          |  Argdecl
Argdecls        ::= Argdecl:argdec COMMA Argdecls:argdecs
                    {: RESULT= new argDeclsNode(argdec,argdecs,argdec.linenum,argdec.colnum); :}
                |   Argdecl:argdec
                    {: RESULT= new argDeclsNode(argdec,argdec.linenum,argdec.colnum); :}
                ;
//Argdecl  →  Type id
//         |  Type id [ ]
Argdecl         ::= Type:type IDENTIFIER:id
                    {: RESULT= new argDeclNode(type,id,type.linenum,type.colnum); :}
                |   Type:type IDENTIFIER:id LBRACKET RBRACKET
                    {: RESULT= new argDeclNode(type,id,type.linenum,type.colnum); :}
                ;
//Fielddecl  →  Type id ;
//           |  Type id = Expr ;
//           |  Type id [ intlit ] ;
//           |  const id = Expr ;
Fielddecl       ::= Type:type IDENTIFIER:id SEMI
                    {: RESULT= new fieldDeclNode(type,id,type.linenum,type.colnum); :}
                |   Type:type IDENTIFIER:id ASG Expr:expr SEMI
                    {: RESULT= new fieldDeclNode(type,id,expr,type.linenum,type.colnum); :}
                |   Type:type IDENTIFIER:id LBRACKET INTLIT:loc RBRACKET SEMI
                    {: RESULT= new fieldDeclNode(type,id,loc,type.linenum,type.colnum); :}
                |   rw_CONST:type IDENTIFIER:id ASG Expr:expr SEMI
                    {: RESULT= new fieldDeclNode(type,id,expr,type.linenum,type.colnum); :}
                ;
//Stmts  →  Stmt Stmts
//       |  Stmt
Stmts           ::= Stmt:stmt Stmts:stmts
                    {: RESULT= new stmtsNode(stmt,stmts,stmt.linenum,stmt.colnum); :}
                |   Stmt:stmt
                    {: RESULT= new stmtsNode(stmt,stmt.linenum,stmt.colnum); :}
                ;
//Stmt  →  if ( Expr ) Stmt
//      |  if ( Expr ) Stmt else Stmt
//      |  while ( Expr ) Stmt
//      |  id : while ( Expr ) Stmt
//      |  Name = Expr ;
//      |  read ( Readlist ) ;
//      |  print ( Printlist ) ;
//      |  id ( ) ;
//      |  id ( Args ) ;
//      |  return ;
//      |  return Expr ;
//      |  break id ;
//      |  continue id ;
//      |  { Fielddecls Stmts } OptionalSemi
Stmt            ::= rw_IF:i LPAREN Expr:expr RPAREN Stmt:stmt rw_ENDIF
                    {: RESULT= new stmtNode(expr,stmt,i.linenum,i.colnum); :}
                |   rw_IF:i LPAREN Expr:expr RPAREN Stmt:stmttrue rw_ELSE Stmt:stmtfalse rw_ENDIF
                    {: RESULT= new stmtNode(expr,stmttrue,stmtfalse,i.linenum,i.colnum); :}
                |   rw_WHILE:whil LPAREN Expr:expr RPAREN Stmt:stmt
                    {: RESULT= new stmtNode(expr,stmt,whil.linenum,whil.colnum); :}
                |   IDENTIFIER:id COLON rw_WHILE LPAREN Expr:expr RPAREN Stmt:stmt
                    {: RESULT= new stmtNode(id,expr,stmt,id.linenum,id.colnum); :}
                |   Name:name ASG Expr:expr SEMI
                    {: RESULT= new stmtNode(name,expr,name.linenum,name.colnum); :}
                |   rw_READ:read LPAREN Readlist:list RPAREN SEMI
                    {: RESULT= new stmtNode(read,list,read.linenum,read.colnum); :}
                |   rw_PRINT:print LPAREN Printlist:list RPAREN SEMI
                    {: RESULT= new stmtNode(print,list,print.linenum,print.colnum); :}
                |   IDENTIFIER:id LPAREN RPAREN SEMI
                    {: RESULT= new stmtNode(id,id.linenum,id.colnum); :}
                |   IDENTIFIER:id LPAREN Args:args RPAREN SEMI
                    {: RESULT= new stmtNode(id,args,id.linenum,id.colnum); :}
                |   rw_RETURN:ret SEMI
                    {: RESULT= new stmtNode(ret,ret.linenum,ret.colnum); :}
                |   rw_RETURN:ret Expr:expr SEMI
                    {: RESULT= new stmtNode(ret,expr,ret.linenum,ret.colnum); :}
                |   rw_BREAK:br IDENTIFIER:id SEMI
                    {: RESULT= new stmtNode(br,id,br.linenum,br.colnum); :}
                |   rw_CONTINUE:cont IDENTIFIER:id SEMI
                    {: RESULT= new stmtNode(cont,id,cont.linenum,cont.colnum); :}
                |   LBRACE:brace Fielddecls:fields Stmts:stmts RBRACE OptionalSemi
                    {: RESULT= new stmtNode(fields,stmts,brace.linenum,brace.colnum); :}
                ;
//Type  →  int
//      |  char
//      |  bool
Type            ::= rw_INT:type
                    {: RESULT= new typeNode(type,type.linenum,type.colnum); :}
                |   rw_CHAR:type
                    {: RESULT= new typeNode(type,type.linenum,type.colnum); :}
                |   rw_BOOL:type
                    {: RESULT= new typeNode(type,type.linenum,type.colnum); :}
                ;
//Args  →  Expr , Args
//      |  Expr
Args            ::= Expr:e COMMA Args:a
                    {: RESULT= new argsNode(expr,args,expr.linenum,expr.colnum); :}
                |   Expr:e
                    {: RESULT= new argsNode(expr,expr.linenum,expr.colnum); :}
                ;
//Readlist  →  Name , Readlist
//          |  Name
Readlist        ::= Name:name COMMA Readlist:list
                    {: RESULT= new readListNode(name,list,name.linenum,name.colnum); :}
                |   Name:name
                    {: RESULT= new readListNode(name,name.linenum,name.colnum); :}
                ;
//Printlist  →  Expr , Printlist
//           |  Expr
Printlist       ::= Expr:expr COMMA Printlist:list
                    {: RESULT= new printListNode(expr,list,expr.linenum,expr.colnum); :}
                |   Expr:expr
                    {: RESULT= new printListNode(expr,expr.linenum,expr.colnum); :}
                ;
//Expr  →  Expr || Term
//      |  Expr && Term
//      |  Term
Expr            ::= Expr:expr COR:op Term:term
                    {: RESULT= new exprNode(expr,op,term,expr.linenum,expr.colnum); :}
                |   Expr:expr CAND:op Term:term
                    {: RESULT= new exprNode(expr,op,term,expr.linenum,expr.colnum); :}
                |   Term:term
                    {: RESULT= new exprNode(term,term.linenum,term.colnum); :}
                ;
//Term  →  Factor < Factor
//      |  Factor > Factor
//      |  Factor <= Factor
//      |  Factor >= Factor
//      |  Factor == Factor
//      |  Factor != Factor
//      |  Factor
Term            ::= Factor:left LT:op Factor:right
                    {: RESULT= new termNode(left,op,right,left.linenum,left.colnum); :}
                |   Factor:left GT:op Factor:right
                    {: RESULT= new termNode(left,op,right,left.linenum,left.colnum); :}
                |   Factor:left LEQ:op Factor:right
                    {: RESULT= new termNode(left,op,right,left.linenum,left.colnum); :}
                |   Factor:left GEQ:op Factor:right
                    {: RESULT= new termNode(left,op,right,left.linenum,left.colnum); :}
                |   Factor:left EQ:op Factor:right
                    {: RESULT= new termNode(left,op,right,left.linenum,left.colnum); :}
                |   Factor:left NOTEQ:op Factor:right
                    {: RESULT= new termNode(left,op,right,left.linenum,left.colnum); :}
                |   Factor:left
                    {: RESULT= new termNode(left,left.linenum,left.colnum); :}
                ;
//Factor  →  Factor + Pri
//        |  Factor - Pri
//        |  Pri
Factor          ::= Factor:left PLUS:op Pri:right
                    {: RESULT= new factorNode(left,op,right,left.linenum,left.colnum); :}
                |   Factor:left MINUS:op Pri:right
                    {: RESULT= new factorNode(left,op,right,left.linenum,left.colnum); :}
                |   Pri:left
                    {: RESULT= new factorNode(left,left.linenum,left.colnum); :}
                ;
//Pri →  Pri * Unary
//    |  Pri / Unary
//    |  Unary
Pri             ::= Pri:left TIMES:op Unary:right
                    {: RESULT= new priNode(left,op,right,left.linenum,left.colnum); :}
                |   Pri:left SLASH:op Unary:right
                    {: RESULT= new priNode(left,op,right,left.linenum,left.colnum); :}
                |   Unary:left
                    {: RESULT= new priNode(left,left.linenum,left.colnum); :}
                ;
//Unary  →  ! Unary
//       |  ( Type ) Unary
//       |  Unit
Unary           ::= NOT:op Unary:unary
                    {: RESULT= new unaryNode(op,unary,op.linenum,op.colnum); :}
                |   LPAREN:paren Type:type RPAREN Unary:unary
                    {: RESULT= new unaryNode(type,unary,paren.linenum,paren.colnum); :}
                |   Unit:unit
                    {: RESULT= new unaryNode(unit,unit.linenum,unit.colnum); :}
                ;
//Unit  →  Name
//      |  id ( )
//      |  id ( Args )
//      |  intlit
//      |  charlit
//      |  floatlit
//      |  strlit
//      |  true
//      |  false
//      |  ( Expr )
Unit            ::= Name:name
                    {: RESULT= new unitNode(name,name.linenum,name.colnum); :}
                |   IDENTIFIER:id LPAREN RPAREN
                    {: RESULT= new unitNode(id,id.linenum,id.colnum); :}
                |   IDENTIFIER:id LPAREN Args:args RPAREN
                    {: RESULT= new unitNode(id,args,id.linenum,id.colnum); :}
                |   INTLIT:i
                    {: RESULT= new unitNode(i,i.linenum,i.colnum); :}
                |   CHARLIT:c
                    {: RESULT= new unitNode(c,c.linenum,c.colnum); :}
                |   FLOATLIT:f
                    {: RESULT= new unitNode(f,f.linenum,f.colnum); :}
                |   STRLIT:str
                    {: RESULT= new unitNode(str,str.linenum,str.colnum); :}
                |   rw_TRUE:t
                    {: RESULT= new unitNode(t,t.linenum,t.colnum); :}
                |   rw_FALSE:f
                    {: RESULT= new unitNode(f,f.linenum,f.colnum); :}
                |   LPAREN:paren Expr:expr RPAREN
                    {: RESULT= new unitNode(expr,paren.linenum,paren.colnum); :}
                ;
//name  →  id
//      |  id [ Expr ]
Name            ::= IDENTIFIER:id
                    {: RESULT= new nameNode(id,id.linenum,id.colnum); :}
                |   IDENTIFIER:id LBRACKET Expr:expr RBRACKET
                    {: RESULT= new nameNode(id,expr,id.linenum,id.colnum); :}
                ;
