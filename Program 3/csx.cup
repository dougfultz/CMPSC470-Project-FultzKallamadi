/** csx CUP Specification
 *  @author Doug Fultz
 *  @author Sujay Kallamadi
 */

import java_cup.runtime.*;

parser code {:
    public void syntax_error(Symbol cur_token){
        report_error("CSX syntax error at line "+String.valueOf(((CSXToken)cur_token.value).linenum),null);
    }
:};

/* Preliminaries to set up and use the scanner.  */
init with {:              :};
scan with {: return Scanner.next_token(); :};

/* Terminals (tokens returned by the scanner). */
//Assignment
terminal CSXToken               ASG;
//Comparision
terminal CSXToken               EQ, NOTEQ, GEQ, GT, LEQ, LT;
//Boolean
terminal CSXToken               CAND, COR, NOT;
//Math
terminal CSXToken               MINUS, PLUS, SLASH, TIMES;
//Inrement/Decrement
terminal CSXToken               DEC, INC;
//Braces
terminal CSXToken               LBRACE, RBRACE;
//Brackets
terminal CSXToken               LBRACKET, RBRACKET;
//Parenthesis
terminal CSXToken               LPAREN, RPAREN;
//Reserved Words
terminal CSXToken               rw_BOOL, rw_BREAK, rw_CHAR, rw_CLASS, rw_CONST, rw_CONTINUE, rw_ENDIF, rw_ELSE, rw_FALSE, rw_IF, rw_INT, rw_FLOAT, rw_PRINT, rw_READ, rw_RETURN, rw_TRUE, rw_VOID, rw_WHILE, rw_FOR;
//Unused Reserved Words
//terminal CSXToken               rw_FLOAT;
//Miscellaneous Symbols
terminal CSXToken               COLON, COMMA, SEMI;
//Error
//terminal CSXToken               error;
//End of file
//terminal CSXToken               EOF;
//Character Literal
terminal CSXCharLitToken        CHARLIT;
//Identifier
terminal CSXIdentifierToken     IDENTIFIER;
//Integer Literal
terminal CSXIntLitToken         INTLIT;
//Float Literal
terminal CSXFloatLitToken       FLOATLIT;
//String Literal
terminal CSXStringLitToken      STRLIT;

/* Non terminals */
non terminal classNode          Program;
non terminal memberDeclsNode    Memberdecls;
non terminal fieldDeclsNode     Fielddecls;
non terminal methodDeclsNode    Methoddecls;
non terminal stmtNode           OptionalSemi;
non terminal methodDeclNode     Methoddecl;
non terminal argDeclsNode       Argdecls;
non terminal argDeclNode        Argdecl;
non terminal declNode           Fielddecl;
non terminal stmtsNode          Stmts;
non terminal stmtNode           Stmt;
non terminal typeNode           Type;
non terminal argsNode           Args;
non terminal stmtNode           Readlist;
non terminal stmtNode           Printlist;
non terminal exprNode           Expr;
non terminal exprNode           Term;
non terminal exprNode           Factor;
non terminal exprNode           Pri;
non terminal exprNode           Unary;
non terminal exprNode           Unit;
non terminal nameNode           Name;
non terminal stmtNode           Init;
non terminal exprNode           Condition;
non terminal stmtNode           Update;
non terminal stmtsNode          Body;

/* Precedences/Associativity */
precedence left         CAND, COR, NOT;
precedence nonassoc     EQ, NOTEQ, GEQ, GT, LEQ, LT;
precedence left         PLUS, MINUS;
precedence left         TIMES, SLASH;
precedence right        NOT;
//Needed to make Unary highest precedence???
//precedence right        NOT, RPAREN;

/* The grammar */
start with Program;

//Program  →  class id { Memberdecls }
Program         ::= rw_CLASS:cl IDENTIFIER:id LBRACE Memberdecls:members RBRACE
                    {: RESULT= new classNode(
                        new identNode(id.identifierText,id.linenum,id.colnum),
                        members,
                        cl.linenum,
                        cl.colnum); :}
                ;
//Memberdecls  →  Fielddecl Memberdecls
//             |  Methoddecls
Memberdecls     ::= Fielddecl:field Memberdecls:members
                    {: RESULT= new memberDeclsNode(
                        new fieldDeclsNode(field,members.fields,field.linenum,field.colnum),
                        members.methods,
                        field.linenum,
                        field.colnum); :}
                |   Methoddecls:methods
                    {: RESULT= new memberDeclsNode(
                        fieldDeclsNode.NULL,
                        methods,
                        methods.linenum,
                        methods.colnum); :}
                ;
//Fielddecls →  Fielddecl Fielddecls
//           |  λ
Fielddecls      ::= Fielddecl:field Fielddecls:fields
                    {: RESULT= new fieldDeclsNode(field,fields,field.linenum,field.colnum); :}
                |
                    {: RESULT= fieldDeclsNode.NULL; :}
                ;
//Methoddecls  →  Methoddecl Methoddecls
//             |  λ
Methoddecls     ::= Methoddecl:method Methoddecls:methods
                    {: RESULT= new methodDeclsNode(method,methods,method.linenum,method.colnum); :}
                |
                    {: RESULT= methodDeclsNode.NULL; :}
                ;
//OptionalSemi  →  ;
//              |  λ
OptionalSemi    ::= SEMI:semi
                    {: RESULT= stmtNode.NULL; :}
                |
                    {: RESULT= stmtNode.NULL; :}
                ;
//Methoddecl →  void id ( ) { Fielddecls Stmts } OptionalSemi
//           |  void id ( Argdecls ) { Fielddecls Stmts } OptionalSemi
//           |  Type id ( ) { Fielddecls Stmts } OptionalSemi
//           |  Type id ( Argdecls ){ Fielddecls Stmts } OptionalSemi
Methoddecl      ::= rw_VOID:type IDENTIFIER:id LPAREN RPAREN LBRACE Fielddecls:fields Stmts:stmts RBRACE OptionalSemi
                    {: RESULT= new methodDeclNode(
                        new identNode(id.identifierText,id.linenum,id.colnum),
                        argDeclsNode.NULL,
                        new voidTypeNode(type.linenum,type.colnum),
                        fields,
                        stmts,
                        type.linenum,
                        type.colnum); :}
                |   rw_VOID:type IDENTIFIER:id LPAREN Argdecls:args RPAREN LBRACE Fielddecls:fields Stmts:stmts RBRACE OptionalSemi
                    {: RESULT= new methodDeclNode(
                        new identNode(id.identifierText,id.linenum,id.colnum),
                        args,
                        new voidTypeNode(type.linenum,type.colnum),
                        fields,
                        stmts,
                        type.linenum,
                        type.colnum); :}
                |   Type:type IDENTIFIER:id LPAREN RPAREN LBRACE Fielddecls:fields Stmts:stmts RBRACE OptionalSemi
                    {: RESULT= new methodDeclNode(
                        new identNode(id.identifierText,id.linenum,id.colnum),
                        argDeclsNode.NULL,
                        type,
                        fields,
                        stmts,
                        type.linenum,
                        type.colnum); :}
                |   Type:type IDENTIFIER:id LPAREN Argdecls:args RPAREN LBRACE Fielddecls:fields Stmts:stmts RBRACE OptionalSemi
                    {: RESULT= new methodDeclNode(
                        new identNode(id.identifierText,id.linenum,id.colnum),
                        args,
                        type,
                        fields,
                        stmts,
                        type.linenum,
                        type.colnum); :}
                ;
//Argdecls  →  Argdecl , Argdecls
//          |  Argdecl
Argdecls        ::= Argdecl:argdec COMMA Argdecls:argdecs
                    {: RESULT= new argDeclsNode(argdec,argdecs,argdec.linenum,argdec.colnum); :}
                |   Argdecl:argdec
                    {: RESULT= new argDeclsNode(argdec,argDeclsNode.NULL,argdec.linenum,argdec.colnum); :}
                ;
//Argdecl  →  Type id
//         |  Type id [ ]
Argdecl         ::= Type:type IDENTIFIER:id
                    {: RESULT= new valArgDeclNode(
                        new identNode(id.identifierText,id.linenum,id.colnum),
                        type,
                        type.linenum,
                        type.colnum); :}
                |   Type:type IDENTIFIER:id LBRACKET RBRACKET
                    {: RESULT= new arrayArgDeclNode(
                        new identNode(id.identifierText,id.linenum,id.colnum),
                        type,
                        type.linenum,
                        type.colnum); :}
                ;
//Fielddecl  →  Type id ;
//           |  Type id = Expr ;
//           |  Type id [ intlit ] ;
//           |  const id = Expr ;
Fielddecl       ::= Type:type IDENTIFIER:id SEMI
                    {: RESULT= new varDeclNode(
                        new identNode(id.identifierText,id.linenum,id.colnum),
                        type,
                        exprNode.NULL,
                        type.linenum,
                        type.colnum); :}
                |   Type:type IDENTIFIER:id ASG Expr:expr SEMI
                    {: RESULT= new varDeclNode(
                        new identNode(id.identifierText,id.linenum,id.colnum),
                        type,
                        expr,
                        type.linenum,
                        type.colnum); :}
                |   Type:type IDENTIFIER:id LBRACKET INTLIT:size RBRACKET SEMI
                    {: RESULT= new arrayDeclNode(
                        new identNode(id.identifierText,id.linenum,id.colnum),
                        type,
                        new intLitNode(size.intValue,size.linenum,size.colnum),
                        type.linenum,
                        type.colnum); :}
                |   rw_CONST:type IDENTIFIER:id ASG Expr:expr SEMI
                    {: RESULT= new constDeclNode(
                        new identNode(id.identifierText,id.linenum,id.colnum),
                        expr,
                        type.linenum,
                        type.colnum); :}
                ;
//Stmts  →  Stmt Stmts
//       |  Stmt
Stmts           ::= Stmt:stmt Stmts:stmts
                    {: RESULT= new stmtsNode(stmt,stmts,stmt.linenum,stmt.colnum); :}
                |   Stmt:stmt
                    {: RESULT= new stmtsNode(stmt,stmtsNode.NULL,stmt.linenum,stmt.colnum); :}
                ;
//Stmt  →  if ( Expr ) Stmt
//      |  if ( Expr ) Stmt else Stmt
//      |  while ( Expr ) Stmt
//      |  id : while ( Expr ) Stmt
//      |  Name = Expr ;
//      |  read ( Readlist ) ;
//      |  print ( Printlist ) ;
//      |  id ( ) ;
//      |  id ( Args ) ;
//      |  return ;
//      |  return Expr ;
//      |  break id ;
//      |  continue id ;
//      |  { Fielddecls Stmts } OptionalSemi
//      |  ++ Name
//      |  Name ++
//      |  -- Name
//      |  Name --
//      |  for ( Init ; Condition ; Update ) Body
Stmt            ::= rw_IF:i LPAREN Expr:expr RPAREN Stmt:stmt rw_ENDIF
                    {: RESULT= new ifThenNode(expr,stmt,stmtNode.NULL,i.linenum,i.colnum); :}
                |   rw_IF:i LPAREN Expr:expr RPAREN Stmt:stmttrue rw_ELSE Stmt:stmtfalse rw_ENDIF
                    {: RESULT= new ifThenNode(expr,stmttrue,stmtfalse,i.linenum,i.colnum); :}
                |   rw_WHILE:whil LPAREN Expr:expr RPAREN Stmt:stmt
                    {: RESULT= new whileNode(
                        exprNode.NULL,
                        expr,
                        stmt,
                        whil.linenum,
                        whil.colnum); :}
                |   IDENTIFIER:id COLON rw_WHILE LPAREN Expr:expr RPAREN Stmt:stmt
                    {: RESULT= new whileNode(
                        new identNode(id.identifierText,id.linenum,id.colnum),
                        expr,
                        stmt,
                        id.linenum,
                        id.colnum); :}
                |   Name:name ASG Expr:expr SEMI
                    {: RESULT= new asgNode(name,expr,name.linenum,name.colnum); :}
                |   rw_READ:read LPAREN Readlist:list RPAREN SEMI
                    {: RESULT= list; :}
                |   rw_PRINT:print LPAREN Printlist:list RPAREN SEMI
                    {: RESULT= list; :}
                |   IDENTIFIER:id LPAREN RPAREN SEMI
                    {: RESULT= new callNode(
                        new identNode(id.identifierText,id.linenum,id.colnum),
                        argsNode.NULL,
                        id.linenum,
                        id.colnum); :}
                |   IDENTIFIER:id LPAREN Args:args RPAREN SEMI
                    {: RESULT= new callNode(
                        new identNode(id.identifierText,id.linenum,id.colnum),
                        args,
                        id.linenum,
                        id.colnum); :}
                |   rw_RETURN:ret SEMI
                    {: RESULT= new returnNode(exprNode.NULL,ret.linenum,ret.colnum); :}
                |   rw_RETURN:ret Expr:expr SEMI
                    {: RESULT= new returnNode(expr,ret.linenum,ret.colnum); :}
                |   rw_BREAK:br IDENTIFIER:id SEMI
                    {: RESULT= new breakNode(
                        new identNode(id.identifierText,id.linenum,id.colnum),
                        br.linenum,
                        br.colnum); :}
                |   rw_CONTINUE:cont IDENTIFIER:id SEMI
                    {: RESULT= new continueNode(
                        new identNode(id.identifierText,id.linenum,id.colnum),
                        cont.linenum,
                        cont.colnum); :}
                |   LBRACE:brace Fielddecls:fields Stmts:stmts RBRACE OptionalSemi
                    {: RESULT= new blockNode(fields,stmts,brace.linenum,brace.colnum); :}
                |   INC:i Name:name
                    {: RESULT= new incNode(name,i.linenum,i.colnum); :}
                |   Name:name INC:i
                    {: RESULT= new incNode(name,i.linenum,i.colnum); :}
                |   DEC:d Name:name
                    {: RESULT= new decNode(name,d.linenum,d.colnum); :}
                |   Name:name DEC:d
                    {: RESULT= new decNode(name,d.linenum,d.colnum); :}
                |   rw_FOR:f LPAREN Init:i SEMI Condition:c SEMI Update:u RPAREN Body:b
                    {: RESULT= new forNode(i, c, u, b, f.linenum, f.colnum); :}
                ;
//Type  →  int
//      |  char
//      |  bool
//      |  float
Type            ::= rw_INT:type
                    {: RESULT= new intTypeNode(type.linenum,type.colnum); :}
                |   rw_CHAR:type
                    {: RESULT= new charTypeNode(type.linenum,type.colnum); :}
                |   rw_BOOL:type
                    {: RESULT= new boolTypeNode(type.linenum,type.colnum); :}
                |   rw_FLOAT:type
                    {: RESULT= new floatTypeNode(type.linenum,type.colnum); :}
                ;
//Args  →  Expr , Args
//      |  Expr
Args            ::= Expr:expr COMMA Args:args
                    {: RESULT= new argsNode(
                        expr,
                        args,
                        expr.linenum,
                        expr.colnum); :}
                |   Expr:expr
                    {: RESULT= new argsNode(
                        expr,
                        argsNode.NULL,
                        expr.linenum,
                        expr.colnum); :}
                ;
//Readlist  →  Name , Readlist
//          |  Name
Readlist        ::= Name:name COMMA Readlist:list
                    {: RESULT= new readNode(
                        name,
                        (readNode)list,
                        name.linenum,
                        name.colnum); :}
                |   Name:name
                    {: RESULT= new readNode(
                        name,
                        readNode.NULL,
                        name.linenum,
                        name.colnum); :}
                ;
//Printlist  →  Expr , Printlist
//           |  Expr
Printlist       ::= Expr:expr COMMA Printlist:list
                    {: RESULT= new printNode(
                        expr,
                        (printNode)list,
                        expr.linenum,
                        expr.colnum); :}
                |   Expr:expr
                    {: RESULT= new printNode(
                        expr,
                        printNode.NULL,
                        expr.linenum,
                        expr.colnum); :}
                ;
//Expr  →  Expr || Term
//      |  Expr && Term
//      |  Term
Expr            ::= Expr:expr COR:op Term:term
                    {: RESULT= new binaryOpNode(expr,sym.COR,term,expr.linenum,expr.colnum); :}
                |   Expr:expr CAND:op Term:term
                    {: RESULT= new binaryOpNode(expr,sym.CAND,term,expr.linenum,expr.colnum); :}
                |   Term:term
                    {: RESULT= term; :}
                ;
//Term  →  Factor < Factor
//      |  Factor > Factor
//      |  Factor <= Factor
//      |  Factor >= Factor
//      |  Factor == Factor
//      |  Factor != Factor
//      |  Factor
Term            ::= Factor:left LT:op Factor:right
                    {: RESULT= new binaryOpNode(left,sym.LT,right,left.linenum,left.colnum); :}
                |   Factor:left GT:op Factor:right
                    {: RESULT= new binaryOpNode(left,sym.GT,right,left.linenum,left.colnum); :}
                |   Factor:left LEQ:op Factor:right
                    {: RESULT= new binaryOpNode(left,sym.LEQ,right,left.linenum,left.colnum); :}
                |   Factor:left GEQ:op Factor:right
                    {: RESULT= new binaryOpNode(left,sym.GEQ,right,left.linenum,left.colnum); :}
                |   Factor:left EQ:op Factor:right
                    {: RESULT= new binaryOpNode(left,sym.EQ,right,left.linenum,left.colnum); :}
                |   Factor:left NOTEQ:op Factor:right
                    {: RESULT= new binaryOpNode(left,sym.NOTEQ,right,left.linenum,left.colnum); :}
                |   Factor:left
                    {: RESULT= left; :}
                ;
//Factor  →  Factor + Pri
//        |  Factor - Pri
//        |  Pri
Factor          ::= Factor:left PLUS:op Pri:right
                    {: RESULT= new binaryOpNode(left,sym.PLUS,right,left.linenum,left.colnum); :}
                |   Factor:left MINUS:op Pri:right
                    {: RESULT= new binaryOpNode(left,sym.MINUS,right,left.linenum,left.colnum); :}
                |   Pri:left
                    {: RESULT= left; :}
                ;
//Pri →  Pri * Unary
//    |  Pri / Unary
//    |  Unary
Pri             ::= Pri:left TIMES:op Unary:right
                    {: RESULT= new binaryOpNode(left,sym.TIMES,right,left.linenum,left.colnum); :}
                |   Pri:left SLASH:op Unary:right
                    {: RESULT= new binaryOpNode(left,sym.SLASH,right,left.linenum,left.colnum); :}
                |   Unary:left
                    {: RESULT= left; :}
                ;
//Unary  →  ! Unary
//       |  ( Type ) Unary
//       |  Unit
Unary           ::= NOT:op Unary:unary
                    {: RESULT= new unaryOpNode(sym.NOT,unary,op.linenum,op.colnum); :}
                |   LPAREN:paren Type:type RPAREN Unary:unary
                    {: RESULT= new castNode(type,unary,paren.linenum,paren.colnum); :}
                |   Unit:unit
                    {: RESULT= unit; :}
                ;
//Unit  →  Name
//      |  id ( )
//      |  id ( Args )
//      |  intlit
//      |  charlit
//      |  floatlit
//      |  strlit
//      |  true
//      |  false
//      |  ( Expr )
Unit            ::= Name:name
                    {: RESULT= name; :}
                |   IDENTIFIER:id LPAREN RPAREN
                    {: RESULT= new fctCallNode(
                        new identNode(id.identifierText,id.linenum,id.colnum),
                        argsNode.NULL,
                        id.linenum,
                        id.colnum); :}
                |   IDENTIFIER:id LPAREN Args:args RPAREN
                    {: RESULT= new fctCallNode(
                        new identNode(id.identifierText,id.linenum,id.colnum),
                        args,
                        id.linenum,
                        id.colnum); :}
                |   INTLIT:i
                    {: RESULT= new intLitNode(i.intValue,i.linenum,i.colnum); :}
                |   CHARLIT:c
                    {: 
                        Character theChar= new Character('X');
                        switch (c.charValue.length()){
                            case 1:
                                //Directly convert to a char
                                theChar=new Character(c.charValue.charAt(0));
                                break;
                            case 2:
                                //Check if first character is a slash (\)
                                if(c.charValue.charAt(0)=='\\'){
                                    //Convert to a character
                                    switch (c.charValue.charAt(1)){
                                        case 'n':
                                            theChar= new Character('\n');
                                            break;
                                        case 't':
                                            theChar= new Character('\t');
                                            break;
                                        default:
                                            System.err.println("Scanner error: "+c.charValue+" Not a valid charlit");
                                            System.exit(1);
                                            break;
                                    }
                                }else{
                                    System.err.println("Scanner error: "+c.charValue+" Not a valid charlit");
                                    System.exit(1);
                                }
                                break;
                            default:
                                //Error, scanner gave bad input
                                System.err.println("Scanner error: "+c.charValue+" Not a valid charlit");
                                System.exit(1);
                                break;
                        }
                        RESULT= new charLitNode(theChar.charValue(),c.linenum,c.colnum); //TODO :}
                |   FLOATLIT:f
                    {: RESULT= new floatLitNode(f.floatValue,f.linenum,f.colnum); :}
                |   STRLIT:str
                    {: RESULT= new strLitNode(str.stringValue,str.linenum,str.colnum); :}
                |   rw_TRUE:t
                    {: RESULT= new trueNode(t.linenum,t.colnum); :}
                |   rw_FALSE:f
                    {: RESULT= new falseNode(f.linenum,f.colnum); :}
                |   LPAREN:paren Expr:expr RPAREN
                    //From page 4 of CUP User's Manual
                    {: RESULT= expr; :}
                ;
//name  →  id
//      |  id [ Expr ]
Name            ::= IDENTIFIER:id
                    {: RESULT= new nameNode(
                        new identNode(id.identifierText,id.linenum,id.colnum),
                        exprNode.NULL,
                        id.linenum,
                        id.colnum); :}
                |   IDENTIFIER:id LBRACKET Expr:expr RBRACKET
                    {: RESULT= new nameNode(
                        new identNode(id.identifierText,id.linenum,id.colnum),
                        expr,
                        id.linenum,
                        id.colnum); :}
                ;
//Init  →  id = Expr
Init            ::= Name:name ASG Expr:expr
                    {: RESULT= new asgNode(name,expr,name.linenum,name.colnum); :}
                ;
//Condition →   Factor < Factor
//          |   Factor > Factor
//          |   Factor <= Factor
//          |   Factor >= Factor
//          |   Factor == Factor
//          |   Factor != Factor
Condition       ::= Factor:left LT:op Factor:right
                    {: RESULT= new binaryOpNode(left,sym.LT,right,left.linenum,left.colnum); :}
                |   Factor:left GT:op Factor:right
                    {: RESULT= new binaryOpNode(left,sym.GT,right,left.linenum,left.colnum); :}
                |   Factor:left LEQ:op Factor:right
                    {: RESULT= new binaryOpNode(left,sym.LEQ,right,left.linenum,left.colnum); :}
                |   Factor:left GEQ:op Factor:right
                    {: RESULT= new binaryOpNode(left,sym.GEQ,right,left.linenum,left.colnum); :}
                |   Factor:left EQ:op Factor:right
                    {: RESULT= new binaryOpNode(left,sym.EQ,right,left.linenum,left.colnum); :}
                |   Factor:left NOTEQ:op Factor:right
                    {: RESULT= new binaryOpNode(left,sym.NOTEQ,right,left.linenum,left.colnum); :}
                ;
